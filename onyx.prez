
[var tbright 236]
[var bbright 20]

[define_text_style normal color   $tbright $tbright $tbright font_size 40 font_name "Arial" left padding 10]
[define_text_style title color    $tbright $tbright $tbright font_attr bold font_size 72 font_name "Arial" centered]
[define_text_style subtitle color $tbright $tbright $tbright font_attr italic font_size 72 font_name "Arial" centered]
[define_text_style header color   $tbright $tbright $tbright font_attr bold font_size 72 font_name "Arial" left padding 10]

[define_text_style hyperlink color 100 100 255 font_attr italic font_size 40 font_name "Arial" left padding 10]
[define_text_style code color $tbright $tbright $tbright font_size 40 font_name "monospace" left padding 20]

[load_image onyx_example "https://brendanfh.com/files/onyx_prez/onyx_example.png"]
[load_image wasm_logo "https://webassembly.org/css/webassembly.svg"]

# ---------------------------------------------
[slide] [background $bbright $bbright $bbright]

[rect color 40 40 40 x 0 w 100 y 35 h 30]
[rect color 0   0  0 x 0 w 100 y 40 h 20] 

[text_style title font_size 96]
[y 50] Onyx

[text_style normal font_attr italic font_size 36 centered]
[y 56] A simple, yet powerful programming language for WebAssembly.



# ---------------------------------------------
# Introduce what Onyx is, the design goals, the improvements over C, etc.

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] What is Onyx?

[text_style normal]
[y 22] New programming language for WebAssembly developed entirely by me.

[y 34] Some important design features:
[text_style inherit padding 15]
▪ Strongly typed
▪ Fast compilation
▪ Easy to write
▪ Easy to read

[image onyx_example x 50 y 30 width 35
    border_color 30 30 30 border_width 1]


# ---------------------------------------------
# BRIEFLY introduce WASM and its capabilities

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] Brief aside of WebAssembly

[text_style normal]
[y 20] WebAssembly (WASM) is a new execution platform for the web.

[y 30] It defines:
[text_style inherit padding 15]
▪ Virtual Instruction Set Architecture
▪ Linear Memory Model
▪ Arbitrary imports
▪ Safe indirect function calls

[text_style normal]
[y 60] Multiple embeddings:
[text_style inherit padding 15]
▪ Web browsers
▪ WebAssembly Systems Interface (WASI)

[text_style normal centered]
[y 80] For more information, you can check out,
[text_style hyperlink centered]
https://webassembly.org/

[image wasm_logo x 65 y 34 width 20
    border_width 2 border_color 20 20 20]


# ---------------------------------------------
# High-level language features and design that make it super cozy to program in.

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] High Level Design

[text_style normal]
[y 20] Started vaguely at C, because C did many things right.

[text_style normal font_attr italic font_size 44]
[y 30] Declare anywhere
[text_style normal padding 15]
▪ Declaration order of global symbols does not affect compilation.
▪ Removes clunky function prototypes in C.

[text_style normal font_attr italic font_size 44]
[y 50] Polymorphic procedures and structures
[text_style normal padding 15]
▪ Making procedures polymorphic is as easy as possible.
▪ Polymorphic procedures are not 'special'.

[text_style normal font_attr italic font_size 44]
[y 70] Package system
[text_style normal padding 15]
▪ Prevent cluttering of global scope.
▪ Easily access symbols in a package.

# ---------------------------------------------
# Hello, World!

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] Obligatory 'Hello, World!' in Onyx

[rect color 10 10 10 x 15 y 34 w 70 h 40]

[text_style code]
[y 40]
 1  #load "core/std"
 2
 3  use package core
 4
 5  main :: (args: [] cstr) {
 6      println("Hello, World!");
 7  }


# ---------------------------------------------
# Compiler internals
#   * Entity priority queue
#   * Running engine

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] Compiler Internal Design

# Normal symbol tables are not powerful enough so an out
# of order processing scheme such as a priority queue is
# needed

[text_style normal font_attr italic]
[y 20] Compilation engine

[text_style normal padding 15]
1. The parser generates a set of entities for a file.
2. These entities are added to a priority queue.
3. Entities are processed one-by-one until compilation completes or fails.

[text_style normal font_attr italic]
[y 45] Entity

[text_style normal padding 15]
▪ Abstract syntax tree node
▪ Metadata about the node (scope, package, etc.)
▪ State and type for ordering in the queue



# ---------------------------------------------
# Projects done in Onyx

[slide]
[rect color 40 40 40 x 8 w 84  y 5 h 95]
[rect color 0  0  0  x 0 w 100 y 5 h 10]
[text_style header]
[y 12] What has been made in Onyx

[text_style normal]
[y 20]
▪ Advent of Code 2020
▪ MNIST Digit Recognizer
▪ Efficient WebGL Renderer

[text_style inherit font_attr italic]
▪ This presentation site
