use package core

HTML_Image :: struct {
    handle: i32 = -1;
    width:  i32 = 1; // To avoid dividing by 0
    height: i32 = 1;
}

Color :: struct {
    r, g, b: f32;
    a: f32 = 1;
}

Slideshow :: struct {
    // A basic arena that should store everything related to slides.
    // This makes it easy to free everything at once.
    arena : alloc.arena.ArenaState;

    title  : str;
    slides : [..] Slide;

    current_slide : i32;

    image_map : map.Map(str, HTML_Image);
}

Slide :: struct {
    background: Color;

    items : [] ^Slide_Item;
}

Slide_Item :: struct #union {
    Kind :: enum {
        Undefined;
        Text;
        Image;
        Rect;
    }

    use base: Slide_Item_Base;
    text  : Slide_Item_Text;
    image : Slide_Item_Image; 
    rect  : Slide_Item_Rect;
}

Slide_Item_Base :: struct {
    kind : Slide_Item.Kind;
}

Slide_Item_Text :: struct {
    use base := Slide_Item_Base.{ Slide_Item.Kind.Text };

    color : Color = Color.{ 1, 1, 1 };

    font_name : str;
    font_size : u32;
    font_attr : FontAttributes = ~~ 0;

    FontAttributes :: enum #flags { Bold; Italic; Underline; }

    text    : str;
    y_pos   : f32; // Between 0 and 1
    padding : f32; // Between 0 and 1
    justify : Justify;

    Justify :: enum { Left; Center; Right; }
}

Slide_Item_Image :: struct {
    use base := Slide_Item_Base.{ Slide_Item.Kind.Image };

    name  : str;
    x, y  : f32; // Between 0 and 1
    width : f32; // Between 0 and 1

    // Currently the image maintains the original aspect ratio,
    // so the height of the image is automatically determined.
}

Slide_Item_Rect :: struct {
    use base := Slide_Item_Base.{ Slide_Item.Kind.Rect };

    color : Color;

    x, y : f32; // Between 0 and 1
    w, h : f32; // Between 0 and 1
}



slideshow_make :: (allocator := context.allocator) -> Slideshow {
    slideshow: Slideshow;
    slideshow_init(^slideshow, allocator);

    // @Reconsider: By not reseting the current_slide to 0 in the init function,
    // the current slide can persist over resets. This makes it easier to be
    // editing a slideshow because you will remain on the same slide, provided
    // no other slides were added before the slide you're working on.
    slideshow.current_slide = 0;

    return slideshow;
}

slideshow_init :: (use s: ^Slideshow, allocator := context.allocator) {
    title = "Untitled Slideshow";

    arena = alloc.arena.make(allocator, arena_size = 16 * 1024);
    array.init(^slides, 4);

    map.init(^image_map, default = HTML_Image.{});
}

slideshow_reset :: (use s: ^Slideshow) {
    alloc.arena.free(^arena);
    array.free(^slides);

    map.free(^image_map);

    slideshow_init(s);
}

slideshow_get_current_slide :: (use s: ^Slideshow) -> ^Slide {
    current_slide = math.clamp(current_slide, 0, slides.count - 1); 

    return ^slides[current_slide];
}

slideshow_advance_slide :: (use s: ^Slideshow, count := 1) {
    current_slide += count;
    current_slide = math.clamp(current_slide, 0, slides.count - 1); 
}

slideshow_insert_slide :: (use s: ^Slideshow, at := -1) -> ^Slide {
    // @Robustness: not checking the return values on these calls

    if at > 0 {
        array.insert_empty(^slides, at);
        return ^slides[at];
    }

    array.ensure_capacity(^slides, slides.count + 1);
    defer slides.count += 1;
    return ^slides[slides.count];
}

slideshow_make_item :: (use s: ^Slideshow) -> ^Slide_Item {
    allocator := alloc.arena.make_allocator(^arena);
    return new(Slide_Item, allocator = allocator);
}

slideshow_load_image :: (use s: ^Slideshow, image_name: str, image_path: str) -> HTML_Image {
    if map.has(^image_map, image_name) {
        printf("Warning: the image '%s' was already defined.", image_name);
        return image_map.default_value;
    }

    html_image_load :: (path: str, out_image: ^HTML_Image) -> void #foreign "html" "load_image" ---
    image: HTML_Image;
    html_image_load(image_path, ^image);

    map.put(^image_map, image_name, image);
    return image;
}

slide_init :: (use slide: ^Slide, background_color := Color.{0, 0, 0, 1}, item_count := 4) {
    background = background_color;

    items = memory.make_slice(#type ^Slide_Item, item_count);
    memory.set(items.data, 0, items.count * sizeof ^Slide_Item);
}

slide_render :: (use slide: ^Slide) {
    // I would like to alias Canvas to C here, but right now
    // this does not work:
    //
    //     C :: Canvas
    //
    Canvas.clear(canvas, background.r, background.g, background.b, background.a);

    for item: items do if item != null do slide_item_render(item, slide);
}

slide_item_render :: (use slide_item: ^Slide_Item, slide: ^Slide) {
    use Canvas
    use Slide_Item.Kind

    switch kind {
        case Text {
            set_font_for_text(slide_item);
            set_color(canvas, text.color.r, text.color.g, text.color.b, text.color.a);

            use Slide_Item_Text.Justify
            switch text.justify {
                case Center do draw_centered_text(text.text, text.y_pos);

                case Left {
                    use Canvas

                    width, height := cast(f32) get_width(canvas), cast(f32) get_height(canvas);
                    x, y := text.padding * width, text.y_pos * height;
                    fill_text(canvas, text.text, x, y);
                }

                case Right {
                    use Canvas

                    width, height := cast(f32) get_width(canvas), cast(f32) get_height(canvas);

                    font_metrics: TextMetrics;
                    measure_text(canvas, text.text, ^font_metrics);

                    x, y := width - font_metrics.width - text.padding * width, text.y_pos * height;
                    fill_text(canvas, text.text, x, y);
                }
            }
        }

        case Image {
            use Canvas

            if html_image := map.get(^the_slideshow.image_map, image.name); html_image.handle != -1 {
                width, height := cast(f32) get_width(canvas), cast(f32) get_height(canvas);

                // @Speed: There is a much better way of doing this...
                // @Robustness: Currently, because HTML images are asynchronously loaded,
                // the image dimensions are not known when the load_image call is made.
                // These means that the dimensions need to be queried later once the image
                // has been loaded. The real bad thing here, is that the 'html_image' being
                // passed is a local copy from the image_map. This means everytime this image
                // is drawn, it has to requery the image dimensions... Uck...
                store_image_size :: (html_image: ^HTML_Image) -> void #foreign "html" "store_image_size" ---
                store_image_size(^html_image);

                x := image.x * width;
                y := image.y * height;
                w := image.width * width;
                h := w * (cast(f32) html_image.height / cast(f32) html_image.width);
                
                draw_image(canvas, html_image.handle, x, y, w, h);
            }
        }

        case Rect {
            use Canvas

            width, height := cast(f32) get_width(canvas), cast(f32) get_height(canvas);

            x := rect.x * width;
            y := rect.y * height;
            w := rect.w * width;
            h := rect.h * height;

            fill_rect(canvas, x, y, w, h, rect.color.r, rect.color.g, rect.color.b, rect.color.a);
        }
    }


    set_font_for_text :: (use slide_item: ^Slide_Item) {
        use Slide_Item_Text.FontAttributes
        use Canvas

        bold_str := "";
        italic_str := "";
        underline_str := "";

        if text.font_attr & Bold      != ~~ 0 do bold_str = "bold";
        if text.font_attr & Italic    != ~~ 0 do italic_str = "italic";
        if text.font_attr & Underline != ~~ 0 do underline_str = "underline";
        
        formatted_name := aprintf(
            context.allocator,
            "%s %s %s %ipx %s",
            bold_str, italic_str, underline_str,
            text.font_size, text.font_name);
        defer cfree(formatted_name.data);

        set_font(canvas, formatted_name);
    }
}

// @Cleanup: this should be part of the standard library.
aprintf :: (allocator: Allocator, format: str, va: ...) -> str {
    // @Robustness: Same potential overflow bug.
    buffer: [2048] u8;  
    formatted := conv.str_format_va(format, ~~buffer, va);

    output := string.alloc_copy(formatted, allocator = allocator);
    return output;
}
